const ajvInstance = require("../../../utils/ajv") ;
const auctionSchema = require("../../../validate-schemas/auction") ;

const createAuction = {
  type: 'object',
  required: ["transactDate","company"],
  properties: {
    transactDate : auctionSchema.transactDate,
    company : auctionSchema.company,
    auctionName  : auctionSchema.auctionName,
    onOff : auctionSchema.onOff,
    location : auctionSchema.location,
    artistId : auctionSchema.artistId,
    artistKor : auctionSchema.artistKor,
    artistEng  : auctionSchema.artistEng,
    artistBirth : auctionSchema.artistBirth,
    artistDeath : auctionSchema.artistDeath,
    lot : auctionSchema.lot,
    img : auctionSchema.img,
    titleKor : auctionSchema.titleKor,
    titleEng : auctionSchema.titleEng,
    mfgDate : auctionSchema.mfgDate,
    height : auctionSchema.height,
    width : auctionSchema.width,
    depth : auctionSchema.depth,
    materialKind : auctionSchema.materialKind,
    materialKor : auctionSchema.materialKor,
    materialEng : auctionSchema.materialEng,
    sizeTable : auctionSchema.sizeTable,
    signed : auctionSchema.signed,
    exhibited : auctionSchema.exhibited,
    provenance : auctionSchema.provenance,
    literature : auctionSchema.literature,
    catalogue : auctionSchema.catalogue,
    frame : auctionSchema.frame,
    certification : auctionSchema.certification,
    conditionReport : auctionSchema.coditionReport,
    description : auctionSchema.description,
    currency : auctionSchema.currency,
    startPrice : auctionSchema.startPrice,
    hammerPrice : auctionSchema.hammerPrice,
    sellingPrice : auctionSchema.sellingPrice,
    estimateMin : auctionSchema.estimateMin,
    estimateMax : auctionSchema.estimateMax,
    usdStartPrice : auctionSchema.usdStartPrice,
    usdHammerPrice : auctionSchema.usdHammerPrice,
    usdSellingPrice : auctionSchema.usdSellingPrice,
    usdEstimateMin : auctionSchema.usdEstimateMin,
    usdEstimateMax: auctionSchema.usdEstimateMax,
    competition : auctionSchema.competiton,
    bidClass : auctionSchema.bidClass,
    method : auctionSchema.method,
    series : auctionSchema.series,
    mainColor : auctionSchema.mainColor,
    preference : auctionSchema.preference,
    identicalRecords : auctionSchema.identicalRecords,
  },
  errorMessage: {
    transactDate : "Wrong filed transactDate",
    company : "Wrong filed company",
    auctionName : "Wrong filed auctionName",
    onOff : "Wrong filed onOff",
    location : "Wrong filed location",
    artistId : "Wrong filed artistId",
    artistKor : "Wrong filed artistKor",
    artistEng : "Wrong filed artistEng",
    artistBirth : "Wrong filed artistBirth",
    artistDeath : "Wrong filed artistDeath",
    lot : "Wrong filed lot",
    img : "Wrong filed img",
    titleKor : "Wrong filed titleKor",
    titleEng : "Wrong filed titleEng",
    mfgDate : "Wrong filed mfgDate",
    height : "Wrong filed height",
    width : "Wrong filed width",
    depth : "Wrong filed depth",
    materialKind : "Wrong filed materialKind",
    materialKor : "Wrong filed materialKor",
    materialEng : "Wrong filed materialEng",
    sizeTable : "Wrong filed sizeTable",
    signed : "Wrong filed signed",
    exhibited : "Wrong filed exhibited",
    provenance : "Wrong filed provenance",
    literature : "Wrong filed literature",
    catalogue : "Wrong filed catalogue",
    frame : "Wrong filed frame",
    certification : "Wrong filed certification",
    conditionReport : "Wrong filed coditionReport",
    description : "Wrong filed description",
    currency : "Wrong filed currency",
    startPrice : "Wrong filed startPrice",
    hammerPrice : "Wrong filed hammerPrice",
    sellingPrice : "Wrong filed sellingPrice",
    estimateMin : "Wrong filed estimateMin",
    estimateMax : "Wrong filed estimateMax",
    usdStartPrice : "Wrong filed usdStartPrice",
    usdHammerPrice : "Wrong filed usdHammerPrice",
    usdSellingPrice : "Wrong filed usdSellingPrice",
    usdEstimateMin : "Wrong filed usdEstimateMin",
    usdEstimateMax : "Wrong filed usdEstimateMax",
    competition : "Wrong filed competition",
    bidClass : "Wrong filed bidClass",
    method : "Wrong filed method",
    series : "Wrong filed series",
    mainColor : "Wrong filed mainColor",
    preference : "Wrong filed preference",
    identicalRecords : "Wrong filed identicalRecords"
  },
  additionalProperties: false
}
const createAuctionSchema = ajvInstance.compile(createAuction)

module.exports =  {
  createAuctionSchema
}


const editAuction = {
  type: 'object',
  required: ["id"],
  properties: {
    id : auctionSchema.id,
    transactDate : auctionSchema.transactDate,
    company : auctionSchema.company,
    auctionName  : auctionSchema.auctionName,
    onOff : auctionSchema.onOff,
    location : auctionSchema.location,
    artistId : auctionSchema.artistId,
    artistKor : auctionSchema.artistKor,
    artistEng  : auctionSchema.artistEng,
    artistBirth : auctionSchema.artistBirth,
    artistDeath : auctionSchema.artistDeath,
    lot : auctionSchema.lot,
    img : auctionSchema.img,
    titleKor : auctionSchema.titleKor,
    titleEng : auctionSchema.titleEng,
    mfgDate : auctionSchema.mfgDate,
    height : auctionSchema.height,
    width : auctionSchema.width,
    depth : auctionSchema.depth,
    materialKind : auctionSchema.materialKind,
    materialKor : auctionSchema.materialKor,
    materialEng : auctionSchema.materialEng,
    sizeTable : auctionSchema.sizeTable,
    signed : auctionSchema.signed,
    exhibited : auctionSchema.exhibited,
    provenance : auctionSchema.provenance,
    literature : auctionSchema.literature,
    catalogue : auctionSchema.catalogue,
    frame : auctionSchema.frame,
    certification : auctionSchema.certification,
    conditionReport : auctionSchema.coditionReport,
    description : auctionSchema.description,
    currency : auctionSchema.currency,
    startPrice : auctionSchema.startPrice,
    hammerPrice : auctionSchema.hammerPrice,
    sellingPrice : auctionSchema.sellingPrice,
    estimateMin : auctionSchema.estimateMin,
    estimateMax : auctionSchema.estimateMax,
    usdStartPrice : auctionSchema.usdStartPrice,
    usdHammerPrice : auctionSchema.usdHammerPrice,
    usdSellingPrice : auctionSchema.usdSellingPrice,
    usdEstimateMin : auctionSchema.usdEstimateMin,
    usdEstimateMax: auctionSchema.usdEstimateMax,
    competition : auctionSchema.competiton,
    bidClass : auctionSchema.bidClass,
    method : auctionSchema.method,
    series : auctionSchema.series,
    mainColor : auctionSchema.mainColor,
    preference : auctionSchema.preference,
    identicalRecords : auctionSchema.identicalRecords,
  },
  errorMessage: {
    id : "Wrong filed id",
    transactDate : "Wrong filed transactDate",
    company : "Wrong filed company",
    auctionName : "Wrong filed auctionName",
    onOff : "Wrong filed onOff",
    location : "Wrong filed location",
    artistId : "Wrong filed artistId",
    artistKor : "Wrong filed artistKor",
    artistEng : "Wrong filed artistEng",
    artistBirth : "Wrong filed artistBirth",
    artistDeath : "Wrong filed artistDeath",
    lot : "Wrong filed lot",
    img : "Wrong filed img",
    titleKor : "Wrong filed titleKor",
    titleEng : "Wrong filed titleEng",
    mfgDate : "Wrong filed mfgDate",
    height : "Wrong filed height",
    width : "Wrong filed width",
    depth : "Wrong filed depth",
    materialKind : "Wrong filed materialKind",
    materialKor : "Wrong filed materialKor",
    materialEng : "Wrong filed materialEng",
    sizeTable : "Wrong filed sizeTable",
    signed : "Wrong filed signed",
    exhibited : "Wrong filed exhibited",
    provenance : "Wrong filed provenance",
    literature : "Wrong filed literature",
    catalogue : "Wrong filed catalogue",
    frame : "Wrong filed frame",
    certification : "Wrong filed certification",
    coditionReport : "Wrong filed coditionReport",
    description : "Wrong filed description",
    currency : "Wrong filed currency",
    startPrice : "Wrong filed startPrice",
    hammerPrice : "Wrong filed hammerPrice",
    sellingPrice : "Wrong filed sellingPrice",
    estimateMin : "Wrong filed estimateMin",
    estimateMax : "Wrong filed estimateMax",
    usdStartPrice : "Wrong filed usdStartPrice",
    usdHammerPrice : "Wrong filed usdHammerPrice",
    usdSellingPrice : "Wrong filed usdSellingPrice",
    usdEstimateMin : "Wrong filed usdEstimateMin",
    usdEstimateMax : "Wrong filed usdEstimateMax",
    competiton : "Wrong filed competiton",
    bidClass : "Wrong filed bidClass",
    method : "Wrong filed method",
    series : "Wrong filed series",
    mainColor : "Wrong filed mainColor",
    preference : "Wrong filed preference",
    identicalRecords : "Wrong filed identicalRecords"
  },
  additionalProperties: false
}
const updateAuctionSchema = ajvInstance.compile(editAuction)

module.exports =  {
  updateAuctionSchema
}